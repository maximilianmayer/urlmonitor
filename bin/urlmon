#! /bin/env ruby
#

require_relative '../lib/urlmonitor'
require 'commander/import'

program :name, 'URL monitor'
program :version, '0.3.0-dev'
program :description, 'a simple tool to watch for changes on single urls'

urlmon = Urlmonitor.new 'http://localhost'

default_command :list 

command :init do |c|
  c.syntax = 'init'
  c.description =  'initialize urlmonitor configuration'
  c.action do |x|
    res = urlmon.init_config
    say "created work directory: #{res[:dir]}" if res[:dir]
    say "created index file: #{res[:file]}" if res[:file]
  end
end

command :list do |c|
  c.syntax = 'list'
  c.description = 'list monitored webpages'
  c.action do |_|
    print_list
  end
end

command :check do |c|
  c.syntax = 'check <url>'
  c.description = 'check a url for changes. If not checked before, a record will be created.'
  c.option '--url URL', 'The url to check for changes'
  c.option '--id ID', 'The ID of a stored url'
  c.action do |_,options|
    if options.url
      url = options.url
    elsif options.id
      puts "selected ID : #{options.id}"
      url = url_by_id options.id
    else
      res = print_list interactive: true
      url = res['url']
    end
    a = Urlmonitor.new url
    a.check_page
    print_summary(a)
  end
end

command :delete do |c|
  c.syntax = 'delete --id <ID>'
  c.description = 'delete a monitored url'
  c.option '--id ID', 'The ID to delete'
  c.action do |_,options|
    pages  = urlmon.list_pages
    res = pages.select { |x| x['id'] == options.id.to_i }.first
    puts res
    #File.delete({" #{urlmon.workdir}/#{res['file']}")
  end
end


def print_summary(website)
  say ">>>"
  say "Website to check: #{website.url}"
  say "last checked: #{Time.at(website.last_check).to_s}"
  say "http status: #{website.status}"
  say "check status: #{website.last_check_state}"
  say "checksum: #{website.checksum}"
end

def print_list(interactive: false)
  a = Urlmonitor.new 'http://localhost'
  say 'id'.ljust(6) + "last check Date".ljust(44) + 'URL'
  pages = a.list_pages
  pages.each do |page|
    if File.size?("#{a.workdir}/#{page['file']}")
      p_data = JSON.parse(File.read("#{a.workdir}/#{page['file']}" )) 
    else
      puts File.size("#{a.workdir}/#{page['file']}")
      p_data = {}
      p_data['last_check'] = 0
    end
    time_diff = Time.at(Time.now  - Time.at(p_data['last_check'])).utc
    duration = time_diff.strftime("%Hh %Mm %Ss")
    
    say page['id'].to_s.ljust(6) + (Time.at(p_data['last_check']).to_s + '  (' + duration + ')' ).ljust(44) + page['url'] unless page['id'] == 0
  end
  if interactive
    id = ask('Chose an ID: ', Integer)
    pages.select { |x| x['id'] == id }.first
  end
end

def print_header
  say "#{program :name} - v#{program :version}"
end

# @return [String]
def url_by_id(id)
  a = Urlmonitor.new 'http://localhost'
  urls = a.list_pages
  res = urls.select { |x| x['id'] == id.to_i }.first
  res['url']
end

print_header
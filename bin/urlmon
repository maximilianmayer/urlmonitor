#! /bin/env ruby
#

require_relative '../lib/urlmonitor'
require 'commander/import'

program :name, 'simple URL monitor'
program :version, '0.3.0-dev'
program :description, 'a simple tool to watch for changes on single urls'

urlmon = Urlmonitor.new 'http://localhost'

command :init do |c|
  c.syntax = 'init'
  c.description =  'initialize urlmonitor configuration'
  c.action do |x|
    workdir = urlmon.workdir
    unless Dir.exist?(workdir)
      Dir.mkdir(workdir)
      say "created work directory: #{File.expand_path(workdir)}"
      File.new("#{workdir}/index.json",'w')
      say "created index file: #{File.expand_path(workdir)}/index.json"
    end
  end
end

command :list do |c|
  c.syntax = 'list'
  c.description = 'list monitored webpages'
  c.action do |_|
    print_list
  end
end

command :check do |c|
  c.syntax = 'check <url>'
  c.description = 'check a url for changes. If not checked before, a record will be created.'
  c.option '--url URL', 'The url to check for changes'
  c.option '--id ID', 'The ID of a stored url'
  c.action do |_,options|
    if options.url
      a = Urlmonitor.new options.url
    elsif options.id
      puts "selected ID : #{options.id}"
      a = Urlmonitor.new 'http://localhost'
      urls = a.list_pages
      res = urls.select { |x| x['id'] == options.id.to_i }.first
      puts res
      a.url = res['url']
    else
      res = print_list interactive: true
      a = Urlmonitor.new res['url']
    end
    a.check_page
    print_summary(a)
  end
end

command :delete do |c|
  c.syntax = 'delete <url>'
  c.description = 'delete a monitored url'
  c.option '--url'
end


def print_summary(website)
  say "Website to check: #{website.url}"
  say "last checked: #{Time.at(website.last_check).to_s}"
  say "http status: #{website.status}"
  say "check status: #{website.last_check_state}"
  say "checksum: #{website.checksum}"
end

def print_list(interactive: false)
  a = Urlmonitor.new 'http://localhost'
  say 'id'.ljust(6) + 'url'.ljust(60) + "Date".rjust(30)
  pages = a.list_pages
  pages.each do |page|
    say page['id'].to_s.ljust(6) + page['url'].ljust(60) + Time.at(page['date']).to_s.rjust(30)
  end
  if interactive
    id = ask('Chose an ID: ', Integer)
    pages.select { |x| x['id'] == id }.first
  end
end
